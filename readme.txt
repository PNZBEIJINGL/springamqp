RabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上
rabbitmq作为消息队列，一条消息从发布到订阅消费的完整流程为
消息   -->  交换机exchange  ---> 队列queue  --->  消费者
一、使用流程：
------------------------------------------------------
发布者（推送消息的一端）：
------------------------------------------------------
1）创建一个tcp长连接connection，连接rabbitmq的监听端口5672；
2）在TCP长连接下创建一个信道channel,信道可以理解为connection的一个分支；
3）通过信道向rabbitmq声明一个交换机exchange，设置交换机的类型，名称，是否持久化等属性；
4）通过信道向rabbitmq声明一个队列queue，设置队列的名称，是否持久化等参数；
5）通过信道向rabbitmq声明一个绑定binding,设置绑定的交换机名称，队列名称，绑定的路由键；
6）通过信道向rabbitmq推送一条消息，指定交换机和路由；

------------------------------------------------------
消费者（接收消息的一端）：
------------------------------------------------------
1）从第一步到第四步和发布者做的事情是一模一样的,如果已经存在相应的exchange、queue等则跳过；
2）通过信道向rabbitmq声明一个订阅，订阅特定的queue，并且设置回调函数及是否确认等；
3）通过信道监听rabbitmq推送过来的消息；


二、深入理解：
1.创建连接connection：
1）rabbitmq实现的是AMQP通信协议，其所允许的最大AMQP连接数，本质上是TCP连接数；
2）采用TCP长连接，自带SSL认证机制，类似https，保证数据的传输安全；
3）其TCP连接的上限可以通过调整操作系统的限制来变更

2.创建信道channel
1）信道channel可以理解成是connection下的分支，也就是说多个channel共享一个connection，为什么要这么做呢？
2）创建TCP连接是一个非常耗时的操作，如果一个应用需要多个connection的话，每次的创建和关闭会性能降低，而创建多个channel共享一个connection提高性能，节约系统资源；
3）多个channel是相互独立隔离的，这导致了一个问题就是，由于主机只能识别不同的TCP连接，但不能识别不同的信道发送过来的消息，因此rabbitmq为每个创建的信道分配了一个信道ID用来识别不同信道发送的消息；
4）每个信道都是为独立的进程或线程准备的，因此多线程或多进程共享信道是不被允许的；
5）在一个TCP下可创建的chnnel的数量理论上是没有上限的，只取决于系统资源，但可以通过配置channel_max参数设置上限；

3.声明交换机exchange
作用交换机使用来管理分发消息的，一边接受发布者提交的消息，根据消息提供的参数选择相应的处理办法，交换机是不会存储消息的，只有转发或丢弃功能；如果消息携带的路由键没有对应的路由队列，交换机会将消息丢弃；
1-声明交换机时的重要属性：
name:名称，必须唯一；
type:类型，共有四种，默认direct；
Durability：是否持久化，默认否；
Auto delete：是否自动删除；
Internal：是否是内部交换机，默认否；
Arguments：设置额外的参数；
2-交换机类型
1）直连交换机direct：用例：package com.amqp.rabbitmq.routing
作用：顾名思义直连交换机根据消息携带的路由键将该消息投递到绑定的队列；
如果有多个队列使用相同的路由键和直连交换机绑定，那么直连交换机会将消息同时转发到多个队列；
rabbitmq本身存在默认交换机，默认交换机的本质就是名称为空的直连交换机，当任何一个新的队列被声明的时候，rabbitmq会使用这个队列的名字作为路由键自动绑定默认交换机；
通过rabbitmqctl list_exchanges命令查看所有的交换机，可以看到有一个名称为空的direct;

2）扇形交换机funout：用例：package com.amqp.rabbitmq.publishsub
作用：扇形交换机会将消息推送到绑定的所有的队列中，不会理会路由键是什么
在声明funout和队列绑定的时候，也有一个路由键参数，但是写什么都无所谓，funout会将其忽略的；
3）主题交换机topic：：用例：package com.amqp.rabbitmq.topic;
作用：主题交换机使用比较复杂的路由键匹配规则实现一路或多路路由
路由键规则：
使用.分割的词语列表，也可以是单个词语，长度不能超过255个字节；
*号用来匹配一个单词，这个单词不能为空，#号用来匹配0个或多个单词；
例如：
user.*  用来匹配所有绑定了以user开头并且使用了两个单词的路由键；
user.#  用来匹配所有绑定了以user开头并且使用了一个以上单词的所有路由键；

注意
每个交换机的名字是唯一的，如果重复声明交换机并且声明的参数完全一样，那么mq会忽略该声明；
如果声明交换机已经存在，但修改了它的属性，比如类型或持久化等，那么会报错；所以修改的方法是先删除原来的交换机再创建一个新的交换机；


三、集成SPRING
1. 使用原生的工厂链接创建队列,发送并接收1个消息
2. 使用JAVA配置， 使用XML配置方式
用例：package com.amqp.rabbitmq.spring

四、更多资料
相关资料
windows 下安装Rabbitmq 用于测试：https://www.cnblogs.com/ericli-ericli/p/5902270.html
SpringAMQP 项目官网： https://projects.spring.io/spring-amqp/

其他：
https://www.cnblogs.com/cwp-bg/p/8399638.html
https://www.jianshu.com/p/256c502d09cd